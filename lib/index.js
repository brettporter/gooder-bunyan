var GoodBunyan, GoodReporter, Hoek, SafeStringify, internals;

GoodReporter = require('good-reporter');

Hoek = require('hoek');

SafeStringify = require('json-stringify-safe');

internals = {
  defaults: {
    error_level: 'error',
    ops_level: 'info',
    request_level: 'info',
    response_level: 'info',
    other_level: 'info'
  }
};

GoodBunyan = (function() {
  function GoodBunyan(events, bunyan, options) {
    var settings;
    if (options == null) {
      options = {};
    }
    Hoek.assert(this.constructor === GoodBunyan, 'GoodBunyan must be created with new');
    Hoek.assert(bunyan, 'bunyan logger must not be null');
    settings = Hoek.applyToDefaults(internals.defaults, options);
    this.bunyan = bunyan;
    this.error_level = settings.error_level;
    this.ops_level = settings.ops_level;
    this.request_level = settings.request_level;
    this.response_level = settings.response_level;
    this.other_level = settings.other_level;
    GoodReporter.call(this, events, settings);
  }

  return GoodBunyan;

})();

Hoek.inherits(GoodBunyan, GoodReporter);

GoodBunyan.prototype._logResponse = function(event, tags) {
  var query, responsePayload;
  if (tags == null) {
    tags = [];
  }
  query = event.query ? JSON.stringify(event.query) : '';
  responsePayload = '';
  if (typeof event.responsePayload === 'object' && event.responsePayload) {
    responsePayload = 'response payload: ' + SafeStringify(event.responsePayload);
  }
  return this.bunyan[this.response_level](("[" + tags + "], ") + Hoek.format('%s: %s %s %s %s (%sms) %s', event.instance, event.method, event.path, query, event.statusCode, event.responseTime, responsePayload));
};

GoodBunyan.prototype._report = function(event, data) {
  if (event === 'response') {
    return this._logResponse(data, data.tags);
  } else if (event === 'ops') {
    return this.bunyan[this.ops_level](Hoek.format('memory: %sMb, uptime (seconds): %s, load: %s', Math.round(data.proc.mem.rss / (1024 * 1024)), data.proc.uptime, data.os.load));
  } else if (event === 'error') {
    return this.bunyan[this.error_level]('message: ' + data.error.message + ' stack: ' + data.error.stack);
  } else if (event === 'request' || event === 'log') {
    return this.bunyan[this.request_level]('data: ' + (typeof data.data === 'object' ? SafeStringify(data.data) : data.data));
  } else if (data.data) {
    return this.bunyan[this.other_level]('data: ' + (typeof data.data === 'object' ? SafeStringify(data.data) : data.data));
  } else {
    return this.bunyan[this.other_level]('data: (none)');
  }
};

GoodBunyan.prototype.stop = function() {};

GoodBunyan.prototype.init = function(readstream, emitter, callback) {
  readstream.on('data', (function(_this) {
    return function(chunk) {
      return _this._handleEvent(chunk.event, chunk);
    };
  })(this));
  emitter.on('stop', (function(_this) {
    return function() {
      return _this.stop();
    };
  })(this));
  return callback(null);
};

module.exports = GoodBunyan;

//# sourceMappingURL=data:application/json;base64,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LEtBQUQ7YUFDcEIsS0FBQyxDQUFBLFlBQUQsQ0FBYyxLQUFLLENBQUMsS0FBcEIsRUFBMkIsS0FBM0I7SUFEb0I7RUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXRCO0VBR0EsT0FBTyxDQUFDLEVBQVIsQ0FBVyxNQUFYLEVBQW1CLENBQUEsU0FBQSxLQUFBO1dBQUEsU0FBQTthQUNqQixLQUFDLENBQUEsSUFBRCxDQUFBO0lBRGlCO0VBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFuQjtTQUdBLFFBQUEsQ0FBUyxJQUFUO0FBUGlCOztBQVNuQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkdvb2RSZXBvcnRlciA9IHJlcXVpcmUgJ2dvb2QtcmVwb3J0ZXInXG5Ib2VrID0gcmVxdWlyZSAnaG9laydcblNhZmVTdHJpbmdpZnkgPSByZXF1aXJlICdqc29uLXN0cmluZ2lmeS1zYWZlJ1xuXG5pbnRlcm5hbHMgPVxuICBkZWZhdWx0czpcbiAgICBlcnJvcl9sZXZlbDogJ2Vycm9yJ1xuICAgIG9wc19sZXZlbDogJ2luZm8nXG4gICAgcmVxdWVzdF9sZXZlbDogJ2luZm8nXG4gICAgcmVzcG9uc2VfbGV2ZWw6ICdpbmZvJ1xuICAgIG90aGVyX2xldmVsOiAnaW5mbydcblxuY2xhc3MgR29vZEJ1bnlhblxuICBjb25zdHJ1Y3RvcjogKGV2ZW50cywgYnVueWFuLCBvcHRpb25zID0ge30pIC0+XG4gICAgSG9lay5hc3NlcnQgQGNvbnN0cnVjdG9yID09IEdvb2RCdW55YW4sICdHb29kQnVueWFuIG11c3QgYmUgY3JlYXRlZCB3aXRoIG5ldydcbiAgICBIb2VrLmFzc2VydCBidW55YW4sICdidW55YW4gbG9nZ2VyIG11c3Qgbm90IGJlIG51bGwnXG4gICAgc2V0dGluZ3MgPSBIb2VrLmFwcGx5VG9EZWZhdWx0cyBpbnRlcm5hbHMuZGVmYXVsdHMsIG9wdGlvbnNcbiAgICBAYnVueWFuID0gYnVueWFuXG4gICAgQGVycm9yX2xldmVsID0gc2V0dGluZ3MuZXJyb3JfbGV2ZWxcbiAgICBAb3BzX2xldmVsID0gc2V0dGluZ3Mub3BzX2xldmVsXG4gICAgQHJlcXVlc3RfbGV2ZWwgPSBzZXR0aW5ncy5yZXF1ZXN0X2xldmVsXG4gICAgQHJlc3BvbnNlX2xldmVsID0gc2V0dGluZ3MucmVzcG9uc2VfbGV2ZWxcbiAgICBAb3RoZXJfbGV2ZWwgPSBzZXR0aW5ncy5vdGhlcl9sZXZlbFxuICAgIEdvb2RSZXBvcnRlci5jYWxsIHRoaXMsIGV2ZW50cywgc2V0dGluZ3NcblxuSG9lay5pbmhlcml0cyBHb29kQnVueWFuLCBHb29kUmVwb3J0ZXJcblxuR29vZEJ1bnlhbjo6X2xvZ1Jlc3BvbnNlID0gKGV2ZW50LCB0YWdzPVtdKSAtPlxuICBxdWVyeSA9IGlmIGV2ZW50LnF1ZXJ5IHRoZW4gSlNPTi5zdHJpbmdpZnkoZXZlbnQucXVlcnkpIGVsc2UgJydcbiAgcmVzcG9uc2VQYXlsb2FkID0gJydcbiAgaWYgdHlwZW9mIGV2ZW50LnJlc3BvbnNlUGF5bG9hZCA9PSAnb2JqZWN0JyBhbmQgZXZlbnQucmVzcG9uc2VQYXlsb2FkXG4gICAgcmVzcG9uc2VQYXlsb2FkID0gJ3Jlc3BvbnNlIHBheWxvYWQ6ICcgKyBTYWZlU3RyaW5naWZ5IGV2ZW50LnJlc3BvbnNlUGF5bG9hZFxuICBAYnVueWFuW0ByZXNwb25zZV9sZXZlbF0gXCJbI3t0YWdzfV0sIFwiICsgSG9lay5mb3JtYXQgJyVzOiAlcyAlcyAlcyAlcyAoJXNtcykgJXMnLFxuICAgIGV2ZW50Lmluc3RhbmNlLFxuICAgIGV2ZW50Lm1ldGhvZCxcbiAgICBldmVudC5wYXRoLFxuICAgIHF1ZXJ5LFxuICAgIGV2ZW50LnN0YXR1c0NvZGUsXG4gICAgZXZlbnQucmVzcG9uc2VUaW1lLFxuICAgIHJlc3BvbnNlUGF5bG9hZFxuXG5Hb29kQnVueWFuOjpfcmVwb3J0ID0gKGV2ZW50LCBkYXRhKSAtPlxuICBpZiBldmVudCA9PSAncmVzcG9uc2UnXG4gICAgQF9sb2dSZXNwb25zZSBkYXRhLCBkYXRhLnRhZ3NcbiAgZWxzZSBpZiBldmVudCA9PSAnb3BzJ1xuICAgIEBidW55YW5bQG9wc19sZXZlbF0gSG9lay5mb3JtYXQgJ21lbW9yeTogJXNNYiwgdXB0aW1lIChzZWNvbmRzKTogJXMsIGxvYWQ6ICVzJyxcbiAgICAgIE1hdGgucm91bmQoZGF0YS5wcm9jLm1lbS5yc3MgLyAoMTAyNCAqIDEwMjQpKSxcbiAgICAgIGRhdGEucHJvYy51cHRpbWUsXG4gICAgICBkYXRhLm9zLmxvYWRcbiAgZWxzZSBpZiBldmVudCA9PSAnZXJyb3InXG4gICAgQGJ1bnlhbltAZXJyb3JfbGV2ZWxdICdtZXNzYWdlOiAnICsgZGF0YS5lcnJvci5tZXNzYWdlICsgJyBzdGFjazogJyArIGRhdGEuZXJyb3Iuc3RhY2tcbiAgZWxzZSBpZiBldmVudCA9PSAncmVxdWVzdCcgb3IgZXZlbnQgPT0gJ2xvZydcbiAgICBAYnVueWFuW0ByZXF1ZXN0X2xldmVsXSAnZGF0YTogJyArIGlmIHR5cGVvZiBkYXRhLmRhdGEgPT0gJ29iamVjdCcgdGhlbiBTYWZlU3RyaW5naWZ5KGRhdGEuZGF0YSkgZWxzZSBkYXRhLmRhdGFcbiAgIyBFdmVudCB0aGF0IGlzIHVua25vd24gdG8gZ29vZC1jb25zb2xlLCB0cnkgYSBkZWZhdWx0LlxuICBlbHNlIGlmIGRhdGEuZGF0YVxuICAgIEBidW55YW5bQG90aGVyX2xldmVsXSAnZGF0YTogJyArIGlmIHR5cGVvZiBkYXRhLmRhdGEgPT0gJ29iamVjdCcgdGhlbiBTYWZlU3RyaW5naWZ5KGRhdGEuZGF0YSkgZWxzZSBkYXRhLmRhdGFcbiAgZWxzZVxuICAgIEBidW55YW5bQG90aGVyX2xldmVsXSAnZGF0YTogKG5vbmUpJ1xuXG5Hb29kQnVueWFuOjpzdG9wID0gKCkgLT5cbiAgcmV0dXJuXG5cbkdvb2RCdW55YW46OmluaXQgPSAocmVhZHN0cmVhbSwgZW1pdHRlciwgY2FsbGJhY2spIC0+XG4gIHJlYWRzdHJlYW0ub24gJ2RhdGEnLCAoY2h1bmspID0+XG4gICAgQF9oYW5kbGVFdmVudCBjaHVuay5ldmVudCwgY2h1bmtcblxuICBlbWl0dGVyLm9uICdzdG9wJywgKCkgPT5cbiAgICBAc3RvcCgpXG5cbiAgY2FsbGJhY2sgbnVsbFxuXG5tb2R1bGUuZXhwb3J0cyA9IEdvb2RCdW55YW5cbiJdfQ==
