var GoodBunyan, GoodReporter, Hoek, SafeStringify, internals;

GoodReporter = require('good-reporter');

Hoek = require('hoek');

SafeStringify = require('json-stringify-safe');

internals = {
  defaults: {
    error_level: 'error',
    ops_level: 'info',
    request_level: 'info',
    response_level: 'info',
    other_level: 'info'
  }
};

GoodBunyan = (function() {
  function GoodBunyan(events, bunyan, options) {
    var settings;
    if (options == null) {
      options = {};
    }
    Hoek.assert(this.constructor === GoodBunyan, 'GoodBunyan must be created with new');
    Hoek.assert(bunyan, 'bunyan logger must not be null');
    settings = Hoek.applyToDefaults(internals.defaults, options);
    this.bunyan = bunyan;
    this.error_level = settings.error_level;
    this.ops_level = settings.ops_level;
    this.request_level = settings.request_level;
    this.response_level = settings.response_level;
    this.other_level = settings.other_level;
    GoodReporter.call(this, events, settings);
  }

  return GoodBunyan;

})();

Hoek.inherits(GoodBunyan, GoodReporter);

GoodBunyan.prototype._logResponse = function(event, tags) {
  if (tags == null) {
    tags = [];
  }
  return this.bunyan[this.response_level]({
    event: event,
    tags: tags
  });
};

GoodBunyan.prototype._report = function(event, data) {
  return this.bunyan[this.error_level]({
    event: event,
    data: data
  });
};

GoodBunyan.prototype.stop = function() {};

GoodBunyan.prototype.init = function(readstream, emitter, callback) {
  readstream.on('data', (function(_this) {
    return function(chunk) {
      return _this._handleEvent(chunk.event, chunk);
    };
  })(this));
  emitter.on('stop', (function(_this) {
    return function() {
      return _this.stop();
    };
  })(this));
  return callback(null);
};

module.exports = GoodBunyan;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFlBQUEsR0FBZSxPQUFBLENBQVEsZUFBUjs7QUFDZixJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0FBQ1AsYUFBQSxHQUFnQixPQUFBLENBQVEscUJBQVI7O0FBRWhCLFNBQUEsR0FDRTtFQUFBLFFBQUEsRUFDRTtJQUFBLFdBQUEsRUFBYSxPQUFiO0lBQ0EsU0FBQSxFQUFXLE1BRFg7SUFFQSxhQUFBLEVBQWUsTUFGZjtJQUdBLGNBQUEsRUFBZ0IsTUFIaEI7SUFJQSxXQUFBLEVBQWEsTUFKYjtHQURGOzs7QUFPSTtFQUNTLG9CQUFDLE1BQUQsRUFBUyxNQUFULEVBQWlCLE9BQWpCO0FBQ1gsUUFBQTs7TUFENEIsVUFBVTs7SUFDdEMsSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFDLENBQUEsV0FBRCxLQUFnQixVQUE1QixFQUF3QyxxQ0FBeEM7SUFDQSxJQUFJLENBQUMsTUFBTCxDQUFZLE1BQVosRUFBb0IsZ0NBQXBCO0lBQ0EsUUFBQSxHQUFXLElBQUksQ0FBQyxlQUFMLENBQXFCLFNBQVMsQ0FBQyxRQUEvQixFQUF5QyxPQUF6QztJQUNYLElBQUMsQ0FBQSxNQUFELEdBQVU7SUFDVixJQUFDLENBQUEsV0FBRCxHQUFlLFFBQVEsQ0FBQztJQUN4QixJQUFDLENBQUEsU0FBRCxHQUFhLFFBQVEsQ0FBQztJQUN0QixJQUFDLENBQUEsYUFBRCxHQUFpQixRQUFRLENBQUM7SUFDMUIsSUFBQyxDQUFBLGNBQUQsR0FBa0IsUUFBUSxDQUFDO0lBQzNCLElBQUMsQ0FBQSxXQUFELEdBQWUsUUFBUSxDQUFDO0lBQ3hCLFlBQVksQ0FBQyxJQUFiLENBQWtCLElBQWxCLEVBQXdCLE1BQXhCLEVBQWdDLFFBQWhDO0VBVlc7Ozs7OztBQVlmLElBQUksQ0FBQyxRQUFMLENBQWMsVUFBZCxFQUEwQixZQUExQjs7QUFFQSxVQUFVLENBQUEsU0FBRSxDQUFBLFlBQVosR0FBMkIsU0FBQyxLQUFELEVBQVEsSUFBUjs7SUFBUSxPQUFLOztTQUN0QyxJQUFDLENBQUEsTUFBTyxDQUFBLElBQUMsQ0FBQSxjQUFELENBQVIsQ0FBeUI7SUFBQSxLQUFBLEVBQU8sS0FBUDtJQUFjLElBQUEsRUFBTSxJQUFwQjtHQUF6QjtBQUR5Qjs7QUFXM0IsVUFBVSxDQUFBLFNBQUUsQ0FBQSxPQUFaLEdBQXNCLFNBQUMsS0FBRCxFQUFRLElBQVI7U0FDcEIsSUFBQyxDQUFBLE1BQU8sQ0FBQSxJQUFDLENBQUEsV0FBRCxDQUFSLENBQXNCO0lBQUEsS0FBQSxFQUFPLEtBQVA7SUFBYyxJQUFBLEVBQU0sSUFBcEI7R0FBdEI7QUFEb0I7O0FBbUJ0QixVQUFVLENBQUEsU0FBRSxDQUFBLElBQVosR0FBbUIsU0FBQSxHQUFBOztBQUduQixVQUFVLENBQUEsU0FBRSxDQUFBLElBQVosR0FBbUIsU0FBQyxVQUFELEVBQWEsT0FBYixFQUFzQixRQUF0QjtFQUNqQixVQUFVLENBQUMsRUFBWCxDQUFjLE1BQWQsRUFBc0IsQ0FBQSxTQUFBLEtBQUE7V0FBQSxTQUFDLEtBQUQ7YUFDcEIsS0FBQyxDQUFBLFlBQUQsQ0FBYyxLQUFLLENBQUMsS0FBcEIsRUFBMkIsS0FBM0I7SUFEb0I7RUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXRCO0VBR0EsT0FBTyxDQUFDLEVBQVIsQ0FBVyxNQUFYLEVBQW1CLENBQUEsU0FBQSxLQUFBO1dBQUEsU0FBQTthQUNqQixLQUFDLENBQUEsSUFBRCxDQUFBO0lBRGlCO0VBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFuQjtTQUdBLFFBQUEsQ0FBUyxJQUFUO0FBUGlCOztBQVNuQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkdvb2RSZXBvcnRlciA9IHJlcXVpcmUgJ2dvb2QtcmVwb3J0ZXInXG5Ib2VrID0gcmVxdWlyZSAnaG9laydcblNhZmVTdHJpbmdpZnkgPSByZXF1aXJlICdqc29uLXN0cmluZ2lmeS1zYWZlJ1xuXG5pbnRlcm5hbHMgPVxuICBkZWZhdWx0czpcbiAgICBlcnJvcl9sZXZlbDogJ2Vycm9yJ1xuICAgIG9wc19sZXZlbDogJ2luZm8nXG4gICAgcmVxdWVzdF9sZXZlbDogJ2luZm8nXG4gICAgcmVzcG9uc2VfbGV2ZWw6ICdpbmZvJ1xuICAgIG90aGVyX2xldmVsOiAnaW5mbydcblxuY2xhc3MgR29vZEJ1bnlhblxuICBjb25zdHJ1Y3RvcjogKGV2ZW50cywgYnVueWFuLCBvcHRpb25zID0ge30pIC0+XG4gICAgSG9lay5hc3NlcnQgQGNvbnN0cnVjdG9yID09IEdvb2RCdW55YW4sICdHb29kQnVueWFuIG11c3QgYmUgY3JlYXRlZCB3aXRoIG5ldydcbiAgICBIb2VrLmFzc2VydCBidW55YW4sICdidW55YW4gbG9nZ2VyIG11c3Qgbm90IGJlIG51bGwnXG4gICAgc2V0dGluZ3MgPSBIb2VrLmFwcGx5VG9EZWZhdWx0cyBpbnRlcm5hbHMuZGVmYXVsdHMsIG9wdGlvbnNcbiAgICBAYnVueWFuID0gYnVueWFuXG4gICAgQGVycm9yX2xldmVsID0gc2V0dGluZ3MuZXJyb3JfbGV2ZWxcbiAgICBAb3BzX2xldmVsID0gc2V0dGluZ3Mub3BzX2xldmVsXG4gICAgQHJlcXVlc3RfbGV2ZWwgPSBzZXR0aW5ncy5yZXF1ZXN0X2xldmVsXG4gICAgQHJlc3BvbnNlX2xldmVsID0gc2V0dGluZ3MucmVzcG9uc2VfbGV2ZWxcbiAgICBAb3RoZXJfbGV2ZWwgPSBzZXR0aW5ncy5vdGhlcl9sZXZlbFxuICAgIEdvb2RSZXBvcnRlci5jYWxsIHRoaXMsIGV2ZW50cywgc2V0dGluZ3NcblxuSG9lay5pbmhlcml0cyBHb29kQnVueWFuLCBHb29kUmVwb3J0ZXJcblxuR29vZEJ1bnlhbjo6X2xvZ1Jlc3BvbnNlID0gKGV2ZW50LCB0YWdzPVtdKSAtPlxuICBAYnVueWFuW0ByZXNwb25zZV9sZXZlbF0gZXZlbnQ6IGV2ZW50LCB0YWdzOiB0YWdzXG4gICMgQGJ1bnlhbltAcmVzcG9uc2VfbGV2ZWxdIFwiWyN7dGFnc31dLCBcIiArIEhvZWsuZm9ybWF0ICclczogJXMgJXMgJXMgJXMgKCVzbXMpICVzJyxcbiAgIyAgIGV2ZW50Lmluc3RhbmNlLFxuICAjICAgZXZlbnQubWV0aG9kLFxuICAjICAgZXZlbnQucGF0aCxcbiAgIyAgIHF1ZXJ5LFxuICAjICAgZXZlbnQuc3RhdHVzQ29kZSxcbiAgIyAgIGV2ZW50LnJlc3BvbnNlVGltZSxcbiAgIyAgIHJlc3BvbnNlUGF5bG9hZFxuXG5Hb29kQnVueWFuOjpfcmVwb3J0ID0gKGV2ZW50LCBkYXRhKSAtPlxuICBAYnVueWFuW0BlcnJvcl9sZXZlbF0gZXZlbnQ6IGV2ZW50LCBkYXRhOiBkYXRhXG4gICMgaWYgZXZlbnQgPT0gJ3Jlc3BvbnNlJ1xuICAjICAgQF9sb2dSZXNwb25zZSBkYXRhLCBkYXRhLnRhZ3NcbiAgIyBlbHNlIGlmIGV2ZW50ID09ICdvcHMnXG4gICMgICBAYnVueWFuW0BvcHNfbGV2ZWxdIEhvZWsuZm9ybWF0ICdtZW1vcnk6ICVzTWIsIHVwdGltZSAoc2Vjb25kcyk6ICVzLCBsb2FkOiAlcycsXG4gICMgICAgIE1hdGgucm91bmQoZGF0YS5wcm9jLm1lbS5yc3MgLyAoMTAyNCAqIDEwMjQpKSxcbiAgIyAgICAgZGF0YS5wcm9jLnVwdGltZSxcbiAgIyAgICAgZGF0YS5vcy5sb2FkXG4gICMgZWxzZSBpZiBldmVudCA9PSAnZXJyb3InXG4gICMgICBAYnVueWFuW0BlcnJvcl9sZXZlbF0gZXZlbnQ6IGV2ZW50LCBkYXRhOiBkYXRhXG4gICMgZWxzZSBpZiBldmVudCA9PSAncmVxdWVzdCcgb3IgZXZlbnQgPT0gJ2xvZydcbiAgIyAgIEBidW55YW5bQHJlcXVlc3RfbGV2ZWxdICdkYXRhOiAnICsgaWYgdHlwZW9mIGRhdGEuZGF0YSA9PSAnb2JqZWN0JyB0aGVuIFNhZmVTdHJpbmdpZnkoZGF0YS5kYXRhKSBlbHNlIGRhdGEuZGF0YVxuICAjICMgRXZlbnQgdGhhdCBpcyB1bmtub3duIHRvIGdvb2QtY29uc29sZSwgdHJ5IGEgZGVmYXVsdC5cbiAgIyBlbHNlIGlmIGRhdGEuZGF0YVxuICAjICAgQGJ1bnlhbltAb3RoZXJfbGV2ZWxdICdkYXRhOiAnICsgaWYgdHlwZW9mIGRhdGEuZGF0YSA9PSAnb2JqZWN0JyB0aGVuIFNhZmVTdHJpbmdpZnkoZGF0YS5kYXRhKSBlbHNlIGRhdGEuZGF0YVxuICAjIGVsc2VcbiAgIyAgIEBidW55YW5bQG90aGVyX2xldmVsXSAnZGF0YTogKG5vbmUpJ1xuXG5Hb29kQnVueWFuOjpzdG9wID0gKCkgLT5cbiAgcmV0dXJuXG5cbkdvb2RCdW55YW46OmluaXQgPSAocmVhZHN0cmVhbSwgZW1pdHRlciwgY2FsbGJhY2spIC0+XG4gIHJlYWRzdHJlYW0ub24gJ2RhdGEnLCAoY2h1bmspID0+XG4gICAgQF9oYW5kbGVFdmVudCBjaHVuay5ldmVudCwgY2h1bmtcblxuICBlbWl0dGVyLm9uICdzdG9wJywgKCkgPT5cbiAgICBAc3RvcCgpXG5cbiAgY2FsbGJhY2sgbnVsbFxuXG5tb2R1bGUuZXhwb3J0cyA9IEdvb2RCdW55YW5cbiJdfQ==
